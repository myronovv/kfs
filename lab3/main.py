import streamlit as st
from predict import predict_safety
from train_model import TSmodel
from utils import load_db, preprocess_data
from correlations import show_correlations
import pandas as pd

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è –¥–ª—è –∞–ª–µ—Ä–≥—ñ–∫—ñ–≤")

df = load_db()
df = preprocess_data(df)

menu = st.sidebar.radio("–ú–µ–Ω—é", ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –º—ñ—Å—è—Ü–µ–º", "–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –ø–æ –≤–≤–µ–¥–µ–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ" , "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"])

if menu == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –º—ñ—Å—è—Ü–µ–º":

    if 'day' not in df.columns:
        df['day'] = df['last_updated'].dt.day

    if 'country' not in df.columns:
        st.error("–£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ 'country'")
    else:
        country = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É", sorted(df['country'].unique()))
        
        country_df = df[df['country'] == country]
        
        if country_df.empty:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏.")
        else:

            month = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å", sorted(country_df['month'].unique()))

            month_df = country_df[country_df['month'] == month]

            if month_df.empty:
                st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è.")
            else:
                recommendations = []

                for day in sorted(month_df['day'].unique()):
                    daily_data = month_df[month_df['day'] == day]
                    avg_pm = daily_data['air_quality_pm2_5'].mean()

                    if avg_pm < 10:
                        recommendation = "üü¢ –ü–æ–≤—ñ—Ç—Ä—è —á–∏—Å—Ç–µ. –ú–æ–∂–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ–∫—É."
                    elif avg_pm < 25:
                        recommendation = "üü° –ü–æ–º—ñ—Ä–Ω–∞ —è–∫—ñ—Å—Ç—å. –ú–æ–∂–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç–∏, –∞–ª–µ –∑ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—é."
                    else:
                        recommendation = "üî¥ –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è. –ö—Ä–∞—â–µ –∑–∞–ª–∏—à–∏—Ç–∏—Å—å –≤–¥–æ–º–∞."

                    recommendations.append([day, round(avg_pm, 1), recommendation])

                recommendation_df = pd.DataFrame(recommendations, columns=["–î–µ–Ω—å", "–°–µ—Ä–µ–¥–Ω—î PM2.5", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è"])
                st.table(recommendation_df)

elif menu == "–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –ø–æ –≤–≤–µ–¥–µ–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º":
    st.subheader("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≥–æ–¥–Ω—ñ —Ç–∞ —Ö—ñ–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -20, 45, 20)
    humidity = st.slider("–í–æ–ª–æ–≥—ñ—Å—Ç—å (%)", 0, 100, 50)
    uv_index = st.slider("UV Index", 0, 11, 3)
    pm10 = st.slider("PM10", 0, 300, 20)
    no2 = st.slider("NO2", 0.0, 0.2, 0.02)
    co = st.slider("CO", 0.0, 2.0, 0.4)

    input_data = pd.DataFrame([[temperature, humidity, uv_index, pm10, no2, co]],
                              columns=['temperature_celsius', 'humidity', 'uv_index',
                                       'air_quality_pm10', 'air_quality_nitrogen_dioxide',
                                       'air_quality_carbon_monoxide'])

    result = predict_safety(input_data)[0]
    if result == 1:
        st.success("‚úÖ –ú–æ–∂–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ–∫—É")
    else:
        st.error("üö´ –ö—Ä–∞—â–µ –∑–∞–ª–∏—à–∏—Ç–∏—Å—å –≤–¥–æ–º–∞")

elif menu == "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ":
    st.subheader("–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
    if st.button("–Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å"):
        acc = TSmodel(df)
        st.success(f"–ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞. –¢–æ—á–Ω—ñ—Å—Ç—å: {acc:.2f}")

if menu == "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ":
    st.subheader("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
    if st.button("–ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"):
        show_correlations()
