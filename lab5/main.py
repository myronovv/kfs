import streamlit as st
import matplotlib.pyplot as plt
import random
import mysql.connector
from genetic_tsp import run_genetic_algorithm

def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="2505", 
        database="tsp_db"
    )

# –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ—Å—Ç 
def generate_random_cities(n, x_range=(0, 100), y_range=(0, 100)):
    return [(random.randint(*x_range), random.randint(*y_range)) for _ in range(n)]

# –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—É
def plot_route(route, title="–ú–∞—Ä—à—Ä—É—Ç"):
    plt.figure(figsize=(8, 6))
    x = [point[0] for point in route] + [route[0][0]]
    y = [point[1] for point in route] + [route[0][1]]
    plt.plot(x, y, 'o-', color='blue')
    for i, (px, py) in enumerate(route):
        plt.text(px + 1, py + 1, str(i + 1), fontsize=9)
    plt.title(title)
    plt.grid(True)
    st.pyplot(plt)

# –∑–∞–ø–∏—Å –≤ –±–¥ 
def save_to_db(cities, best_route, best_distance, num_cities, max_iterations):
    conn = connect_db()
    cursor = conn.cursor()

    # –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –∑–∞–ø—É—Å–∫
    cursor.execute("""
        INSERT INTO runs (num_cities, max_iterations, best_distance)
        VALUES (%s, %s, %s)
    """, (num_cities, max_iterations, best_distance))
    run_id = cursor.lastrowid

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –º—ñ—Å—Ç–∞
    for i, (x, y) in enumerate(cities):
        cursor.execute("""
            INSERT INTO cities (run_id, city_index, x, y)
            VALUES (%s, %s, %s, %s)
        """, (run_id, i, x, y))

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    for i, (x, y) in enumerate(best_route):
        cursor.execute("""
            INSERT INTO best_route (run_id, city_order, x, y)
            VALUES (%s, %s, %s, %s)
        """, (run_id, i, x, y))

    conn.commit()
    conn.close()
    return run_id

# —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üß† –ï–ª—ñ—Ç–Ω–∏–π –≥–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º ‚Äî –ó–∞–¥–∞—á–∞ –∫–æ–º—ñ–≤–æ—è–∂–µ—Ä–∞")

num_cities = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ç", min_value=5, max_value=30, value=10)
max_iterations = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π", min_value=1, max_value=500, value=250)

# –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
num_individuals = 100
mutation_rate = 0.05
elite_size = 2
stable_limit = 100

if st.button("üîÅ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º"):
    cities = generate_random_cities(num_cities)

    st.subheader("üìç –ü–æ—á–∞—Ç–∫–æ–≤—ñ –º—ñ—Å—Ç–∞:")
    for i, city in enumerate(cities):
        st.write(f"{i + 1}: {city}")

    best_route, best_distance = run_genetic_algorithm(
        cities,
        num_individuals=num_individuals,
        max_iterations=max_iterations,
        mutation_rate=mutation_rate,
        elite_size=elite_size,
        stable_limit=stable_limit,
        verbose=False
    )

    st.subheader("üèÅ –ù–∞–π–∫—Ä–∞—â–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –æ—Å–æ–±–∏–Ω–∞ (–º–∞—Ä—à—Ä—É—Ç):")
    for i, city in enumerate(best_route):
        st.write(f"{i + 1}: {city}")

    st.success(f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç—É: {best_distance:.2f}")
    plot_route(best_route, title="–ù–∞–π–∫—Ä–∞—â–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç")

    # –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –±–¥
    run_id = save_to_db(cities, best_route, best_distance, num_cities, max_iterations)
    st.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î - ID –∑–∞–ø—É—Å–∫—É: {run_id}")
